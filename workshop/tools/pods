#!/bin/bash

# This tool is a variant of `kubectl get pods` and `kubectl get ksvc`.
# It executes both commands but only shows the entries of interest during
# a live demo. For example, it doesn't show Terminating pods.

set -e

once=""
noclear=""
untilcmd=""
grepcmd=""

while [[ "$1" == "--"* ]]; do
    case "$1" in
    --noclear) noclear="1" ;;
    --once)  once="1" ;;
    --until)  untilcmd="$2" ; shift ;;
    --grep)  grepcmd="$2" ; shift ;;
    *) echo "Uknown option '$1'" ; exit 1 ;;
    esac
    shift
done

if [[ -z "${noclear}" ]]; then
    clear
fi

CLUSTER=${1:-${KUBECONFIG##*-}}
CLUSTER=${CLUSTER%.yml}
TMPFILE=/tmp/pods-tmp${RANDOM}

function finish {
  rm -f "${TMPFILE}"
}
trap finish EXIT

oldSize=0

bx config --check-version false
$(bx ks cluster-config -s --export ${CLUSTER})

while true ; do
    printf "Cluster: ${CLUSTER}\033[K\\n" > $TMPFILE

    kubectl get ksvc < /dev/null 2>&1 | while read name domain latestc latestr ready reason
    do
        if [[ "${name}" == "No" ]]; then
            name="NAME"
            latestr="LATESTREADY"
            ready="READY"
        fi

        if [[ "${name}" == "NAME" ]]; then
            name="K_SVC_NAME"
        fi

        printf "%-30s %-30s %-5s\033[K\\n" "${name}" "${latestr}" "${ready}" >> $TMPFILE
    done

    printf "\033[K\\n" >> $TMPFILE
    read -s -n 1 -t 0.01 ch || true
    if ! [[ "$ch" == "" ]]; then
        break
    fi

    kubectl get pods < /dev/null 2>&1 | while read name ready status restarts age
    do
        if [[ "${name}" == "No" ]]; then
            name="NAME"
            status="STATUS"
            AGE="AGE"
        fi

        if [[ "${name}" == "NAME" ]]; then
            name="POD_NAME"
        fi

        [[ "${status}" == "Completed" ]] && continue
        [[ "${status}" == "Terminating" ]] && continue

        printf "%-55s %-15s  %s\033[K\\n" "${name}" "${status}" "${age}" >> $TMPFILE
    done
    ! [[ "${PIPESTATUS[0]}" == "0" ]] && exit 1

    # printf "\033[K\\n" >> $TMPFILE

    # clear
    if [[ "$oldSize" != "0" ]]; then
	    printf "\033[%dA" "${oldSize}"
    fi
    newSize=$(wc -l "${TMPFILE}" | sed "s/ .*//")
	while (( oldSize > newSize )); do
        printf "\033[K\\n" >> $TMPFILE
		let oldSize=oldSize-1
	done
    cat $TMPFILE
    oldSize=$(wc -l "${TMPFILE}" | sed "s/ .*//")
    # rm -f $TMPFILE

    if [[ -n "${once}" ]]; then
       break
    fi

	if [[ -n "${grepcmd}" ]]; then
        set +e
	    grep "${grepcmd}" $TMPFILE > /dev/null 2>&1 && break
        set -e
	fi
	
	if [[ -n "$untilcmd" ]]; then
		set +e
		bash -c " ${untilcmd} " >/dev/null 2>&1 && break
		set -e
	fi

    read -s -n 1 -t 1 ch || true
    if ! [[ "$ch" == "" ]]; then
        break
    fi

done
